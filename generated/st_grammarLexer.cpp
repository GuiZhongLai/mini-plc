
// Generated from /home/lai/mini_plc/tools/../grammar/st_grammar.g4 by ANTLR 4.13.1


#include "st_grammarLexer.h"


using namespace antlr4;

using namespace antlrcpptest;


using namespace antlr4;

namespace {

struct St_grammarLexerStaticData final {
  St_grammarLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  St_grammarLexerStaticData(const St_grammarLexerStaticData&) = delete;
  St_grammarLexerStaticData(St_grammarLexerStaticData&&) = delete;
  St_grammarLexerStaticData& operator=(const St_grammarLexerStaticData&) = delete;
  St_grammarLexerStaticData& operator=(St_grammarLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag st_grammarlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
St_grammarLexerStaticData *st_grammarlexerLexerStaticData = nullptr;

void st_grammarlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (st_grammarlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(st_grammarlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<St_grammarLexerStaticData>(
    std::vector<std::string>{
      "VAR", "END_VAR", "BOOL", "INT", "REAL", "STRING", "TIME", "ARRAY", 
      "OF", "IF", "THEN", "END_IF", "ELSIF", "ELSE", "FOR", "TO", "BY", 
      "DO", "END_FOR", "WHILE", "END_WHILE", "RETURN", "EXIT", "AND", "OR", 
      "NOT", "DB_NUMBER", "DB_BIT", "DB_BYTE", "DB_WORD", "DB_DWORD", "ABS_INPUT_BIT", 
      "ABS_INPUT_BYTE", "ABS_INPUT_WORD", "ABS_INPUT_DWORD", "ABS_OUTPUT_BIT", 
      "ABS_OUTPUT_BYTE", "ABS_OUTPUT_WORD", "ABS_OUTPUT_DWORD", "ABS_MEMORY_BIT", 
      "ABS_MEMORY_BYTE", "ABS_MEMORY_WORD", "ABS_MEMORY_DWORD", "BOOLEAN_LITERAL", 
      "INTEGER_LITERAL", "REAL_LITERAL", "STRING_LITERAL", "ASSIGN", "EQ", 
      "NEQ", "LT", "LE", "GT", "GE", "ADD", "SUB", "MUL", "DIV", "LPAREN", 
      "RPAREN", "SEMI", "COMMA", "LBRACK", "RBRACK", "DOT", "COLON", "DOTDOT", 
      "ID", "WS", "COMMENT", "LINE_COMMENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'VAR'", "'END_VAR'", "'BOOL'", "'INT'", "'REAL'", "'STRING'", 
      "'TIME'", "'ARRAY'", "'OF'", "'IF'", "'THEN'", "'END_IF'", "'ELSIF'", 
      "'ELSE'", "'FOR'", "'TO'", "'BY'", "'DO'", "'END_FOR'", "'WHILE'", 
      "'END_WHILE'", "'RETURN'", "'EXIT'", "'AND'", "'OR'", "'NOT'", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "':='", "'='", "'<>'", "'<'", "'<='", "'>'", "'>='", "'+'", 
      "'-'", "'*'", "'/'", "'('", "')'", "';'", "','", "'['", "']'", "'.'", 
      "':'", "'..'"
    },
    std::vector<std::string>{
      "", "VAR", "END_VAR", "BOOL", "INT", "REAL", "STRING", "TIME", "ARRAY", 
      "OF", "IF", "THEN", "END_IF", "ELSIF", "ELSE", "FOR", "TO", "BY", 
      "DO", "END_FOR", "WHILE", "END_WHILE", "RETURN", "EXIT", "AND", "OR", 
      "NOT", "DB_NUMBER", "DB_BIT", "DB_BYTE", "DB_WORD", "DB_DWORD", "ABS_INPUT_BIT", 
      "ABS_INPUT_BYTE", "ABS_INPUT_WORD", "ABS_INPUT_DWORD", "ABS_OUTPUT_BIT", 
      "ABS_OUTPUT_BYTE", "ABS_OUTPUT_WORD", "ABS_OUTPUT_DWORD", "ABS_MEMORY_BIT", 
      "ABS_MEMORY_BYTE", "ABS_MEMORY_WORD", "ABS_MEMORY_DWORD", "BOOLEAN_LITERAL", 
      "INTEGER_LITERAL", "REAL_LITERAL", "STRING_LITERAL", "ASSIGN", "EQ", 
      "NEQ", "LT", "LE", "GT", "GE", "ADD", "SUB", "MUL", "DIV", "LPAREN", 
      "RPAREN", "SEMI", "COMMA", "LBRACK", "RBRACK", "DOT", "COLON", "DOTDOT", 
      "ID", "WS", "COMMENT", "LINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,71,595,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
  	1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
  	6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,
  	1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
  	1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,
  	1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
  	1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,
  	1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,
  	1,26,1,26,4,26,281,8,26,11,26,12,26,282,1,27,1,27,1,27,1,27,1,27,4,27,
  	290,8,27,11,27,12,27,291,1,27,1,27,4,27,296,8,27,11,27,12,27,297,3,27,
  	300,8,27,1,28,1,28,1,28,1,28,1,28,4,28,307,8,28,11,28,12,28,308,1,29,
  	1,29,1,29,1,29,1,29,4,29,316,8,29,11,29,12,29,317,1,30,1,30,1,30,1,30,
  	1,30,4,30,325,8,30,11,30,12,30,326,1,31,1,31,1,31,1,31,1,31,4,31,334,
  	8,31,11,31,12,31,335,1,31,1,31,4,31,340,8,31,11,31,12,31,341,3,31,344,
  	8,31,1,32,1,32,1,32,1,32,1,32,4,32,351,8,32,11,32,12,32,352,1,33,1,33,
  	1,33,1,33,1,33,4,33,360,8,33,11,33,12,33,361,1,34,1,34,1,34,1,34,1,34,
  	4,34,369,8,34,11,34,12,34,370,1,35,1,35,1,35,1,35,1,35,4,35,378,8,35,
  	11,35,12,35,379,1,35,1,35,4,35,384,8,35,11,35,12,35,385,3,35,388,8,35,
  	1,36,1,36,1,36,1,36,1,36,4,36,395,8,36,11,36,12,36,396,1,37,1,37,1,37,
  	1,37,1,37,4,37,404,8,37,11,37,12,37,405,1,38,1,38,1,38,1,38,1,38,4,38,
  	413,8,38,11,38,12,38,414,1,39,1,39,1,39,1,39,1,39,4,39,422,8,39,11,39,
  	12,39,423,1,39,1,39,4,39,428,8,39,11,39,12,39,429,3,39,432,8,39,1,40,
  	1,40,1,40,1,40,1,40,4,40,439,8,40,11,40,12,40,440,1,41,1,41,1,41,1,41,
  	1,41,4,41,448,8,41,11,41,12,41,449,1,42,1,42,1,42,1,42,1,42,4,42,457,
  	8,42,11,42,12,42,458,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,
  	470,8,43,1,44,4,44,473,8,44,11,44,12,44,474,1,45,5,45,478,8,45,10,45,
  	12,45,481,9,45,1,45,1,45,4,45,485,8,45,11,45,12,45,486,1,45,1,45,3,45,
  	491,8,45,1,45,4,45,494,8,45,11,45,12,45,495,3,45,498,8,45,1,46,1,46,1,
  	46,1,46,5,46,504,8,46,10,46,12,46,507,9,46,1,46,1,46,1,47,1,47,1,47,1,
  	48,1,48,1,49,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,53,1,53,1,
  	53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,
  	60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,66,1,
  	67,1,67,5,67,558,8,67,10,67,12,67,561,9,67,1,68,4,68,564,8,68,11,68,12,
  	68,565,1,68,1,68,1,69,1,69,1,69,1,69,1,69,5,69,575,8,69,10,69,12,69,578,
  	9,69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,5,70,589,8,70,10,70,
  	12,70,592,9,70,1,70,1,70,1,576,0,71,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
  	8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
  	20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
  	63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
  	43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,
  	54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,
  	64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,1,0,8,1,0,48,57,2,
  	0,69,69,101,101,2,0,43,43,45,45,3,0,10,10,13,13,39,39,3,0,65,90,95,95,
  	97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,
  	13,633,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,
  	11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
  	0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
  	0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
  	43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
  	0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
  	0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
  	75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,
  	0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
  	0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,
  	0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,
  	0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,
  	0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,
  	0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,1,143,1,0,0,0,3,147,1,0,0,0,
  	5,155,1,0,0,0,7,160,1,0,0,0,9,164,1,0,0,0,11,169,1,0,0,0,13,176,1,0,0,
  	0,15,181,1,0,0,0,17,187,1,0,0,0,19,190,1,0,0,0,21,193,1,0,0,0,23,198,
  	1,0,0,0,25,205,1,0,0,0,27,211,1,0,0,0,29,216,1,0,0,0,31,220,1,0,0,0,33,
  	223,1,0,0,0,35,226,1,0,0,0,37,229,1,0,0,0,39,237,1,0,0,0,41,243,1,0,0,
  	0,43,253,1,0,0,0,45,260,1,0,0,0,47,265,1,0,0,0,49,269,1,0,0,0,51,272,
  	1,0,0,0,53,276,1,0,0,0,55,284,1,0,0,0,57,301,1,0,0,0,59,310,1,0,0,0,61,
  	319,1,0,0,0,63,328,1,0,0,0,65,345,1,0,0,0,67,354,1,0,0,0,69,363,1,0,0,
  	0,71,372,1,0,0,0,73,389,1,0,0,0,75,398,1,0,0,0,77,407,1,0,0,0,79,416,
  	1,0,0,0,81,433,1,0,0,0,83,442,1,0,0,0,85,451,1,0,0,0,87,469,1,0,0,0,89,
  	472,1,0,0,0,91,479,1,0,0,0,93,499,1,0,0,0,95,510,1,0,0,0,97,513,1,0,0,
  	0,99,515,1,0,0,0,101,518,1,0,0,0,103,520,1,0,0,0,105,523,1,0,0,0,107,
  	525,1,0,0,0,109,528,1,0,0,0,111,530,1,0,0,0,113,532,1,0,0,0,115,534,1,
  	0,0,0,117,536,1,0,0,0,119,538,1,0,0,0,121,540,1,0,0,0,123,542,1,0,0,0,
  	125,544,1,0,0,0,127,546,1,0,0,0,129,548,1,0,0,0,131,550,1,0,0,0,133,552,
  	1,0,0,0,135,555,1,0,0,0,137,563,1,0,0,0,139,569,1,0,0,0,141,584,1,0,0,
  	0,143,144,5,86,0,0,144,145,5,65,0,0,145,146,5,82,0,0,146,2,1,0,0,0,147,
  	148,5,69,0,0,148,149,5,78,0,0,149,150,5,68,0,0,150,151,5,95,0,0,151,152,
  	5,86,0,0,152,153,5,65,0,0,153,154,5,82,0,0,154,4,1,0,0,0,155,156,5,66,
  	0,0,156,157,5,79,0,0,157,158,5,79,0,0,158,159,5,76,0,0,159,6,1,0,0,0,
  	160,161,5,73,0,0,161,162,5,78,0,0,162,163,5,84,0,0,163,8,1,0,0,0,164,
  	165,5,82,0,0,165,166,5,69,0,0,166,167,5,65,0,0,167,168,5,76,0,0,168,10,
  	1,0,0,0,169,170,5,83,0,0,170,171,5,84,0,0,171,172,5,82,0,0,172,173,5,
  	73,0,0,173,174,5,78,0,0,174,175,5,71,0,0,175,12,1,0,0,0,176,177,5,84,
  	0,0,177,178,5,73,0,0,178,179,5,77,0,0,179,180,5,69,0,0,180,14,1,0,0,0,
  	181,182,5,65,0,0,182,183,5,82,0,0,183,184,5,82,0,0,184,185,5,65,0,0,185,
  	186,5,89,0,0,186,16,1,0,0,0,187,188,5,79,0,0,188,189,5,70,0,0,189,18,
  	1,0,0,0,190,191,5,73,0,0,191,192,5,70,0,0,192,20,1,0,0,0,193,194,5,84,
  	0,0,194,195,5,72,0,0,195,196,5,69,0,0,196,197,5,78,0,0,197,22,1,0,0,0,
  	198,199,5,69,0,0,199,200,5,78,0,0,200,201,5,68,0,0,201,202,5,95,0,0,202,
  	203,5,73,0,0,203,204,5,70,0,0,204,24,1,0,0,0,205,206,5,69,0,0,206,207,
  	5,76,0,0,207,208,5,83,0,0,208,209,5,73,0,0,209,210,5,70,0,0,210,26,1,
  	0,0,0,211,212,5,69,0,0,212,213,5,76,0,0,213,214,5,83,0,0,214,215,5,69,
  	0,0,215,28,1,0,0,0,216,217,5,70,0,0,217,218,5,79,0,0,218,219,5,82,0,0,
  	219,30,1,0,0,0,220,221,5,84,0,0,221,222,5,79,0,0,222,32,1,0,0,0,223,224,
  	5,66,0,0,224,225,5,89,0,0,225,34,1,0,0,0,226,227,5,68,0,0,227,228,5,79,
  	0,0,228,36,1,0,0,0,229,230,5,69,0,0,230,231,5,78,0,0,231,232,5,68,0,0,
  	232,233,5,95,0,0,233,234,5,70,0,0,234,235,5,79,0,0,235,236,5,82,0,0,236,
  	38,1,0,0,0,237,238,5,87,0,0,238,239,5,72,0,0,239,240,5,73,0,0,240,241,
  	5,76,0,0,241,242,5,69,0,0,242,40,1,0,0,0,243,244,5,69,0,0,244,245,5,78,
  	0,0,245,246,5,68,0,0,246,247,5,95,0,0,247,248,5,87,0,0,248,249,5,72,0,
  	0,249,250,5,73,0,0,250,251,5,76,0,0,251,252,5,69,0,0,252,42,1,0,0,0,253,
  	254,5,82,0,0,254,255,5,69,0,0,255,256,5,84,0,0,256,257,5,85,0,0,257,258,
  	5,82,0,0,258,259,5,78,0,0,259,44,1,0,0,0,260,261,5,69,0,0,261,262,5,88,
  	0,0,262,263,5,73,0,0,263,264,5,84,0,0,264,46,1,0,0,0,265,266,5,65,0,0,
  	266,267,5,78,0,0,267,268,5,68,0,0,268,48,1,0,0,0,269,270,5,79,0,0,270,
  	271,5,82,0,0,271,50,1,0,0,0,272,273,5,78,0,0,273,274,5,79,0,0,274,275,
  	5,84,0,0,275,52,1,0,0,0,276,277,5,68,0,0,277,278,5,66,0,0,278,280,1,0,
  	0,0,279,281,7,0,0,0,280,279,1,0,0,0,281,282,1,0,0,0,282,280,1,0,0,0,282,
  	283,1,0,0,0,283,54,1,0,0,0,284,285,5,68,0,0,285,286,5,66,0,0,286,287,
  	5,88,0,0,287,289,1,0,0,0,288,290,7,0,0,0,289,288,1,0,0,0,290,291,1,0,
  	0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,299,1,0,0,0,293,295,5,46,0,0,
  	294,296,7,0,0,0,295,294,1,0,0,0,296,297,1,0,0,0,297,295,1,0,0,0,297,298,
  	1,0,0,0,298,300,1,0,0,0,299,293,1,0,0,0,299,300,1,0,0,0,300,56,1,0,0,
  	0,301,302,5,68,0,0,302,303,5,66,0,0,303,304,5,66,0,0,304,306,1,0,0,0,
  	305,307,7,0,0,0,306,305,1,0,0,0,307,308,1,0,0,0,308,306,1,0,0,0,308,309,
  	1,0,0,0,309,58,1,0,0,0,310,311,5,68,0,0,311,312,5,66,0,0,312,313,5,87,
  	0,0,313,315,1,0,0,0,314,316,7,0,0,0,315,314,1,0,0,0,316,317,1,0,0,0,317,
  	315,1,0,0,0,317,318,1,0,0,0,318,60,1,0,0,0,319,320,5,68,0,0,320,321,5,
  	66,0,0,321,322,5,68,0,0,322,324,1,0,0,0,323,325,7,0,0,0,324,323,1,0,0,
  	0,325,326,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,62,1,0,0,0,328,
  	329,5,37,0,0,329,330,5,73,0,0,330,331,5,88,0,0,331,333,1,0,0,0,332,334,
  	7,0,0,0,333,332,1,0,0,0,334,335,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,
  	0,336,343,1,0,0,0,337,339,5,46,0,0,338,340,7,0,0,0,339,338,1,0,0,0,340,
  	341,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,337,1,
  	0,0,0,343,344,1,0,0,0,344,64,1,0,0,0,345,346,5,37,0,0,346,347,5,73,0,
  	0,347,348,5,66,0,0,348,350,1,0,0,0,349,351,7,0,0,0,350,349,1,0,0,0,351,
  	352,1,0,0,0,352,350,1,0,0,0,352,353,1,0,0,0,353,66,1,0,0,0,354,355,5,
  	37,0,0,355,356,5,73,0,0,356,357,5,87,0,0,357,359,1,0,0,0,358,360,7,0,
  	0,0,359,358,1,0,0,0,360,361,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,
  	68,1,0,0,0,363,364,5,37,0,0,364,365,5,73,0,0,365,366,5,68,0,0,366,368,
  	1,0,0,0,367,369,7,0,0,0,368,367,1,0,0,0,369,370,1,0,0,0,370,368,1,0,0,
  	0,370,371,1,0,0,0,371,70,1,0,0,0,372,373,5,37,0,0,373,374,5,81,0,0,374,
  	375,5,88,0,0,375,377,1,0,0,0,376,378,7,0,0,0,377,376,1,0,0,0,378,379,
  	1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,387,1,0,0,0,381,383,5,46,
  	0,0,382,384,7,0,0,0,383,382,1,0,0,0,384,385,1,0,0,0,385,383,1,0,0,0,385,
  	386,1,0,0,0,386,388,1,0,0,0,387,381,1,0,0,0,387,388,1,0,0,0,388,72,1,
  	0,0,0,389,390,5,37,0,0,390,391,5,81,0,0,391,392,5,66,0,0,392,394,1,0,
  	0,0,393,395,7,0,0,0,394,393,1,0,0,0,395,396,1,0,0,0,396,394,1,0,0,0,396,
  	397,1,0,0,0,397,74,1,0,0,0,398,399,5,37,0,0,399,400,5,81,0,0,400,401,
  	5,87,0,0,401,403,1,0,0,0,402,404,7,0,0,0,403,402,1,0,0,0,404,405,1,0,
  	0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,76,1,0,0,0,407,408,5,37,0,0,408,
  	409,5,81,0,0,409,410,5,68,0,0,410,412,1,0,0,0,411,413,7,0,0,0,412,411,
  	1,0,0,0,413,414,1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,78,1,0,0,
  	0,416,417,5,37,0,0,417,418,5,77,0,0,418,419,5,88,0,0,419,421,1,0,0,0,
  	420,422,7,0,0,0,421,420,1,0,0,0,422,423,1,0,0,0,423,421,1,0,0,0,423,424,
  	1,0,0,0,424,431,1,0,0,0,425,427,5,46,0,0,426,428,7,0,0,0,427,426,1,0,
  	0,0,428,429,1,0,0,0,429,427,1,0,0,0,429,430,1,0,0,0,430,432,1,0,0,0,431,
  	425,1,0,0,0,431,432,1,0,0,0,432,80,1,0,0,0,433,434,5,37,0,0,434,435,5,
  	77,0,0,435,436,5,66,0,0,436,438,1,0,0,0,437,439,7,0,0,0,438,437,1,0,0,
  	0,439,440,1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,441,82,1,0,0,0,442,
  	443,5,37,0,0,443,444,5,77,0,0,444,445,5,87,0,0,445,447,1,0,0,0,446,448,
  	7,0,0,0,447,446,1,0,0,0,448,449,1,0,0,0,449,447,1,0,0,0,449,450,1,0,0,
  	0,450,84,1,0,0,0,451,452,5,37,0,0,452,453,5,77,0,0,453,454,5,68,0,0,454,
  	456,1,0,0,0,455,457,7,0,0,0,456,455,1,0,0,0,457,458,1,0,0,0,458,456,1,
  	0,0,0,458,459,1,0,0,0,459,86,1,0,0,0,460,461,5,84,0,0,461,462,5,82,0,
  	0,462,463,5,85,0,0,463,470,5,69,0,0,464,465,5,70,0,0,465,466,5,65,0,0,
  	466,467,5,76,0,0,467,468,5,83,0,0,468,470,5,69,0,0,469,460,1,0,0,0,469,
  	464,1,0,0,0,470,88,1,0,0,0,471,473,7,0,0,0,472,471,1,0,0,0,473,474,1,
  	0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,90,1,0,0,0,476,478,7,0,0,0,
  	477,476,1,0,0,0,478,481,1,0,0,0,479,477,1,0,0,0,479,480,1,0,0,0,480,482,
  	1,0,0,0,481,479,1,0,0,0,482,484,5,46,0,0,483,485,7,0,0,0,484,483,1,0,
  	0,0,485,486,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,497,1,0,0,0,488,
  	490,7,1,0,0,489,491,7,2,0,0,490,489,1,0,0,0,490,491,1,0,0,0,491,493,1,
  	0,0,0,492,494,7,0,0,0,493,492,1,0,0,0,494,495,1,0,0,0,495,493,1,0,0,0,
  	495,496,1,0,0,0,496,498,1,0,0,0,497,488,1,0,0,0,497,498,1,0,0,0,498,92,
  	1,0,0,0,499,505,5,39,0,0,500,504,8,3,0,0,501,502,5,39,0,0,502,504,5,39,
  	0,0,503,500,1,0,0,0,503,501,1,0,0,0,504,507,1,0,0,0,505,503,1,0,0,0,505,
  	506,1,0,0,0,506,508,1,0,0,0,507,505,1,0,0,0,508,509,5,39,0,0,509,94,1,
  	0,0,0,510,511,5,58,0,0,511,512,5,61,0,0,512,96,1,0,0,0,513,514,5,61,0,
  	0,514,98,1,0,0,0,515,516,5,60,0,0,516,517,5,62,0,0,517,100,1,0,0,0,518,
  	519,5,60,0,0,519,102,1,0,0,0,520,521,5,60,0,0,521,522,5,61,0,0,522,104,
  	1,0,0,0,523,524,5,62,0,0,524,106,1,0,0,0,525,526,5,62,0,0,526,527,5,61,
  	0,0,527,108,1,0,0,0,528,529,5,43,0,0,529,110,1,0,0,0,530,531,5,45,0,0,
  	531,112,1,0,0,0,532,533,5,42,0,0,533,114,1,0,0,0,534,535,5,47,0,0,535,
  	116,1,0,0,0,536,537,5,40,0,0,537,118,1,0,0,0,538,539,5,41,0,0,539,120,
  	1,0,0,0,540,541,5,59,0,0,541,122,1,0,0,0,542,543,5,44,0,0,543,124,1,0,
  	0,0,544,545,5,91,0,0,545,126,1,0,0,0,546,547,5,93,0,0,547,128,1,0,0,0,
  	548,549,5,46,0,0,549,130,1,0,0,0,550,551,5,58,0,0,551,132,1,0,0,0,552,
  	553,5,46,0,0,553,554,5,46,0,0,554,134,1,0,0,0,555,559,7,4,0,0,556,558,
  	7,5,0,0,557,556,1,0,0,0,558,561,1,0,0,0,559,557,1,0,0,0,559,560,1,0,0,
  	0,560,136,1,0,0,0,561,559,1,0,0,0,562,564,7,6,0,0,563,562,1,0,0,0,564,
  	565,1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,567,1,0,0,0,567,568,6,
  	68,0,0,568,138,1,0,0,0,569,570,5,40,0,0,570,571,5,42,0,0,571,576,1,0,
  	0,0,572,575,3,139,69,0,573,575,9,0,0,0,574,572,1,0,0,0,574,573,1,0,0,
  	0,575,578,1,0,0,0,576,577,1,0,0,0,576,574,1,0,0,0,577,579,1,0,0,0,578,
  	576,1,0,0,0,579,580,5,42,0,0,580,581,5,41,0,0,581,582,1,0,0,0,582,583,
  	6,69,0,0,583,140,1,0,0,0,584,585,5,47,0,0,585,586,5,47,0,0,586,590,1,
  	0,0,0,587,589,8,7,0,0,588,587,1,0,0,0,589,592,1,0,0,0,590,588,1,0,0,0,
  	590,591,1,0,0,0,591,593,1,0,0,0,592,590,1,0,0,0,593,594,6,70,0,0,594,
  	142,1,0,0,0,40,0,282,291,297,299,308,317,326,335,341,343,352,361,370,
  	379,385,387,396,405,414,423,429,431,440,449,458,469,474,479,486,490,495,
  	497,503,505,559,565,574,576,590,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  st_grammarlexerLexerStaticData = staticData.release();
}

}

st_grammarLexer::st_grammarLexer(CharStream *input) : Lexer(input) {
  st_grammarLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *st_grammarlexerLexerStaticData->atn, st_grammarlexerLexerStaticData->decisionToDFA, st_grammarlexerLexerStaticData->sharedContextCache);
}

st_grammarLexer::~st_grammarLexer() {
  delete _interpreter;
}

std::string st_grammarLexer::getGrammarFileName() const {
  return "st_grammar.g4";
}

const std::vector<std::string>& st_grammarLexer::getRuleNames() const {
  return st_grammarlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& st_grammarLexer::getChannelNames() const {
  return st_grammarlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& st_grammarLexer::getModeNames() const {
  return st_grammarlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& st_grammarLexer::getVocabulary() const {
  return st_grammarlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView st_grammarLexer::getSerializedATN() const {
  return st_grammarlexerLexerStaticData->serializedATN;
}

const atn::ATN& st_grammarLexer::getATN() const {
  return *st_grammarlexerLexerStaticData->atn;
}




void st_grammarLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  st_grammarlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(st_grammarlexerLexerOnceFlag, st_grammarlexerLexerInitialize);
#endif
}
